{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ReservaService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = 'http://localhost:8080/reservas';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  findAll() {\n    return this.httpClient.get(this.url).pipe(retry(2), catchError(this.handleError));\n  }\n  findById(id) {\n    return this.httpClient.get(this.url + '/' + id).pipe(retry(2), catchError(this.handleError));\n  }\n  create(reserva) {\n    return this.httpClient.post(this.url, JSON.stringify(reserva), this.httpOptions).pipe(retry(2), catchError(this.handleError));\n  }\n  update(reserva) {\n    return this.httpClient.put(this.url + '/' + reserva.id, JSON.stringify(reserva), this.httpOptions).pipe(retry(2), catchError(this.handleError));\n  }\n  cancel(id) {\n    return this.httpClient.delete(this.url + '/' + id, this.httpOptions).pipe(retry(2), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    //Se erro ocorreu no lado do cliente\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      //Erro ocorreu no lado do servidor\n      errorMessage = `Código do erro: ${error.status}, ` + `menssagem: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(() => errorMessage);\n  }\n}\nReservaService.ɵfac = function ReservaService_Factory(t) {\n  return new (t || ReservaService)(i0.ɵɵinject(i1.HttpClient));\n};\nReservaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ReservaService,\n  factory: ReservaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","throwError","retry","catchError","ReservaService","constructor","httpClient","url","httpOptions","headers","findAll","get","pipe","handleError","findById","id","create","reserva","post","JSON","stringify","update","put","cancel","delete","error","errorMessage","ErrorEvent","message","status","console","log","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Giovanni\\Desktop\\Dev\\hospeda\\src\\app\\services\\reserva.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport { Reserva } from '../models/reserva';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReservaService {\n\n  url = 'http://localhost:8080/reservas';\n\n  constructor(private httpClient: HttpClient) { }\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  }\n\n  findAll(): Observable<Reserva[]> {\n    return this.httpClient.get<Reserva[]>(this.url)\n    .pipe(\n      retry(2),\n      catchError(this.handleError)\n    )\n  }\n\n  findById(id: Number): Observable<Reserva> {\n    return this.httpClient.get<Reserva>(this.url + '/' + id)\n    .pipe(\n      retry(2),\n      catchError(this.handleError)\n    )\n  }\n\n  create(reserva: Reserva): Observable<Reserva> {\n    return this.httpClient.post<Reserva>(this.url, JSON.stringify(reserva), this.httpOptions)\n    .pipe(\n      retry(2),\n      catchError(this.handleError)\n    )\n  }\n\n  update(reserva: Reserva): Observable<Reserva> {\n    return this.httpClient.put<Reserva>(this.url + '/' + reserva.id, JSON.stringify(reserva), this.httpOptions)\n    .pipe(\n      retry(2),\n      catchError(this.handleError)\n    )\n  }\n\n  cancel(id: Number): Observable<Reserva> {\n    return this.httpClient.delete<Reserva>(this.url + '/' + id, this.httpOptions)\n    .pipe(\n      retry(2),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error: HttpErrorResponse) {\n    let errorMessage = '';\n\n    //Se erro ocorreu no lado do cliente\n    if(error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n    } else {\n      //Erro ocorreu no lado do servidor\n      errorMessage = `Código do erro: ${error.status}, ` + `menssagem: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(() => errorMessage);\n  }\n}\n"],"mappings":"AACA,SAAwCA,WAAW,QAAQ,sBAAsB;AACjF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,KAAK,EAAEC,UAAU,QAAQ,gBAAgB;;;AAMlD,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAF9B,KAAAC,GAAG,GAAG,gCAAgC;IAItC,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAJ6C;EAM9CU,OAAOA,CAAA;IACL,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAY,IAAI,CAACJ,GAAG,CAAC,CAC9CK,IAAI,CACHV,KAAK,CAAC,CAAC,CAAC,EACRC,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEAC,QAAQA,CAACC,EAAU;IACjB,OAAO,IAAI,CAACT,UAAU,CAACK,GAAG,CAAU,IAAI,CAACJ,GAAG,GAAG,GAAG,GAAGQ,EAAE,CAAC,CACvDH,IAAI,CACHV,KAAK,CAAC,CAAC,CAAC,EACRC,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEAG,MAAMA,CAACC,OAAgB;IACrB,OAAO,IAAI,CAACX,UAAU,CAACY,IAAI,CAAU,IAAI,CAACX,GAAG,EAAEY,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,EAAE,IAAI,CAACT,WAAW,CAAC,CACxFI,IAAI,CACHV,KAAK,CAAC,CAAC,CAAC,EACRC,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEAQ,MAAMA,CAACJ,OAAgB;IACrB,OAAO,IAAI,CAACX,UAAU,CAACgB,GAAG,CAAU,IAAI,CAACf,GAAG,GAAG,GAAG,GAAGU,OAAO,CAACF,EAAE,EAAEI,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,EAAE,IAAI,CAACT,WAAW,CAAC,CAC1GI,IAAI,CACHV,KAAK,CAAC,CAAC,CAAC,EACRC,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEAU,MAAMA,CAACR,EAAU;IACf,OAAO,IAAI,CAACT,UAAU,CAACkB,MAAM,CAAU,IAAI,CAACjB,GAAG,GAAG,GAAG,GAAGQ,EAAE,EAAE,IAAI,CAACP,WAAW,CAAC,CAC5EI,IAAI,CACHV,KAAK,CAAC,CAAC,CAAC,EACRC,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEAA,WAAWA,CAACY,KAAwB;IAClC,IAAIC,YAAY,GAAG,EAAE;IAErB;IACA,IAAGD,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MAClCD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACrC,MAAM;MACL;MACAF,YAAY,GAAG,mBAAmBD,KAAK,CAACI,MAAM,IAAI,GAAG,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEpFE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOzB,UAAU,CAAC,MAAMyB,YAAY,CAAC;EACvC;;AA9DWtB,cAAc,C;mBAAdA,cAAc,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAd/B,cAAc,C;SAAdA,cAAc;EAAAgC,OAAA,EAAdhC,cAAc,CAAAiC,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}