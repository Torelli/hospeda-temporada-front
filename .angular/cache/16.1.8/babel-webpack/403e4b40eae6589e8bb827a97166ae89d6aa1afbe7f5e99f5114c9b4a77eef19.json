{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ReservaService = /*#__PURE__*/(() => {\n  class ReservaService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.url = 'http://localhost:8080/reservas';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    findAll() {\n      return this.httpClient.get(this.url).pipe(retry(2), catchError(this.handleError));\n    }\n    findById(id) {\n      return this.httpClient.get(this.url + '/' + id).pipe(retry(2), catchError(this.handleError));\n    }\n    create(reserva) {\n      return this.httpClient.post(this.url, JSON.stringify(reserva), this.httpOptions).pipe(retry(2), catchError(this.handleError));\n    }\n    update(reserva) {\n      return this.httpClient.put(this.url + '/' + reserva.id, JSON.stringify(reserva), this.httpOptions).pipe(retry(2), catchError(this.handleError));\n    }\n    cancel(id) {\n      return this.httpClient.delete(this.url + '/' + id, this.httpOptions).pipe(retry(2), catchError(this.handleError));\n    }\n    deleteAll() {\n      return this.httpClient.delete(this.url);\n    }\n    handleError(error) {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        //Erro ocorreu no lado do cliente\n        errorMessage = error.error.message;\n      } else {\n        //Erro ocorreu no lado do servidor\n        errorMessage = `Código do erro: ${error.status}, ` + `menssagem: ${error.message}`;\n      }\n      console.log(errorMessage);\n      return throwError(() => errorMessage);\n    }\n  }\n  ReservaService.ɵfac = function ReservaService_Factory(t) {\n    return new (t || ReservaService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ReservaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReservaService,\n    factory: ReservaService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReservaService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}